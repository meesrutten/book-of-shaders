{"version":3,"sources":["js.js"],"names":["console","clear","CanvasManager","element","canvas","document","querySelector","fragmentShaderSource","fragmentShaders","replace","parentElement","textContent","insertAdjacentHTML","camera","THREE","Camera","position","z","scene","Scene","geometry","PlaneBufferGeometry","uniforms","u_time","type","value","u_resolution","Vector2","u_mouse","material","ShaderMaterial","vertexShader","getElementById","fragmentShader","mesh","Mesh","add","renderer","WebGLRenderer","setPixelRatio","window","devicePixelRatio","onWindowResize","addEventListener","onmousemove","e","x","layerX","y","layerY","animate","event","setSize","body","clientWidth","domElement","width","height","requestAnimationFrame","render","lesson1","lesson2","lesson3","lesson4","lesson5","lesson6","lesson7","lesson8","lesson9","lesson10","lesson11","lesson12","lesson13","lesson14","lessons","Array","from","querySelectorAll","lessonClasses","map","part","lesson","id","init"],"mappings":"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","file":"js.00934245.js","sourceRoot":"..","sourcesContent":["// https://thebookofshaders.com/\nconsole.clear()\n\nclass CanvasManager {\n\tconstructor(element){\n\t\tthis.canvas = document.querySelector(element);\t\n    this.fragmentShaderSource = fragmentShaders[element.replace('#','')]\n    \n    this.canvas.parentElement.querySelector('.webgl.dynamic').textContent = this.fragmentShaderSource\n\t\tthis.canvas.insertAdjacentHTML('afterend', `<small class=\"canvas-name\">${element}</small>`)\n\t}\n\tinit(){\n\t\tthis.camera = new THREE.Camera();\n    this.camera.position.z = 1;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.geometry = new THREE.PlaneBufferGeometry( 2, 2 );\n\t\t\n\t\tthis.uniforms = {\n\t\t\tu_time: { type: \"f\", value: 1.0 },\n\t\t\tu_resolution: { type: \"v2\", value: new THREE.Vector2() },\n\t\t\tu_mouse: { type: \"v2\", value: new THREE.Vector2() }\n\t\t};\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n\t\t\tfragmentShader: this.fragmentShaderSource\n\t\t} );\n\n\t\tthis.mesh = new THREE.Mesh( this.geometry, this.material );\n\t\tthis.scene.add( this.mesh );\n\n\t\tthis.renderer = new THREE.WebGLRenderer({ canvas: this.canvas });\n\t\tthis.renderer.setPixelRatio( window.devicePixelRatio );\n\t\n\t\tthis.onWindowResize();\n\t\twindow.addEventListener( 'resize', ()=>this.onWindowResize(), false );\n\n\t\tthis.canvas.onmousemove = e => {\n\t\t\tthis.uniforms.u_mouse.value.x = e.layerX\n\t\t\tthis.uniforms.u_mouse.value.y = e.layerY\n\t\t}\n\t\tthis.animate()\n\t}\n\tonWindowResize(event){\n\t\tthis.renderer.setSize( document.body.clientWidth / 2, document.body.clientWidth / 2 );\n\t\tthis.uniforms.u_resolution.value.x = this.renderer.domElement.width;\n\t\tthis.uniforms.u_resolution.value.y = this.renderer.domElement.height;\n\t}\n\tanimate(){\n\t\trequestAnimationFrame(()=>this.animate());\n\t\tthis.render();\n\t}\n\trender() {\n\t\tthis.uniforms.u_time.value += 0.05;\n\t\tthis.renderer.render( this.scene, this.camera );\n\t}\n}\n\nconst fragmentShaders = {\n\tlesson1: `\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvoid main() {\n  gl_FragColor = vec4(vec3(0.2,0.4,0.9),1.0);\n}\n`,\n\tlesson2:\n\t`\nprecision mediump float;\n\nuniform float u_time;\nuniform vec2 u_mouse;\n\nvoid main() {\n  gl_FragColor = vec4(abs(sin(u_time)),abs(u_mouse.x*0.001),abs(u_mouse.y*0.001) ,1.0);\n}\n`,\n\tlesson3: \n\t`\n#ifdef GL_ES\n  precision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy/u_resolution;\n  gl_FragColor = vec4(abs(cos(u_time * st.x)),abs(sin(u_time * st.y)),abs(sin(u_time * st.y * st.x)),1.0);\n}\n`,\nlesson4:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n\n    float y = log(st.x * PI);\n\n    vec3 color = vec3(y);\n\n    float pct = plot(st,y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n`,\nlesson5:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution;\n\n    // Smooth interpolation between 0.1 and 0.9\n    float y = smoothstep(0.2,0.5,st.x) - smoothstep(0.5,0.8,st.x);\n\n    vec3 color = vec3(y);\n\n    float pct = plot(st,y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    gl_FragColor = vec4(color,1.0);\n}\n`,\nlesson6:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.141592653589793\n#define HALF_PI 1.5707963267948966\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(0.649,0.641,0.912);\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\nvoid main() {\n    vec3 color = vec3(0.0);\n\n    float t = u_time*0.5;\n    float pct = circularOut( abs(fract(t)*2.0-1.) );\n    // Mix uses pct (a value from 0-1) to\n    // mix the two colors\n    gl_FragColor = vec4(vec3(mix(colorA, colorB, pct)),1.0);\n}\n`,\nlesson7:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(1.000,0.833,0.224);\n\nfloat plot (vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.x) -\n          smoothstep( pct, pct+0.01, st.x);\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  vec3 color = vec3(0.0);\n\n  vec3 pct = vec3(st.y);\n\n  pct.r = smoothstep(0.2,0.0, st.y);\n  pct.g = smoothstep(st.x*0.1,st.x*0.0,st.y*0.1);\n  pct.b = pow(st.y,0.5);\n\n  color = mix(colorA, colorB, pct);\n\n  // Plot transition lines for each channel\n  color = mix(color,vec3(1.0,0.0,0.0),plot(st,pct.r));\n  color = mix(color,vec3(0.0,1.0,0.0),plot(st,pct.g));\n  color = mix(color,vec3(0.0,0.0,1.0),plot(st,pct.b));\n\n  gl_FragColor = vec4(color,1.0);\n}\n`,\nlesson8:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution;\n    vec3 color = vec3(0.0);\n\n    // Use polar coordinates instead of cartesian\n    vec2 toCenter = vec2(0.5)-st;\n    float angle = atan(toCenter.y,toCenter.x);\n    float radius = length(toCenter)*2.0;\n\n    // Map the angle (-PI to PI) to the Hue (from 0 to 1)\n    // and the Saturation to the radius\n    color = hsb2rgb(vec3((angle/TWO_PI)+cos(u_time) * 0.5,radius,1.0));\n\n    gl_FragColor = vec4(color,1.0);\n}\n`,\nlesson9:\n\t`\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    // bottom-left\n    vec2 bl = step(vec2(0.1),st);\n    float pct = bl.x * bl.y;\n\n    // top-right\n    vec2 tr = step(vec2(0.1),1.0-st);\n    pct *= tr.x * tr.y;\n\n    // HALF A SQUARE\n    // vec2 bl = ceil(smoothstep(vec2(0.1),st, st.yx));\n    // float pct = bl.x * bl.y;\n\n    // HALF A SQUARE\n    // vec2 tr = floor(smoothstep(vec2(0.1),1.0-st, st.yx));\n    // pct *= tr.x * tr.y;\n\n\n    color = vec3(pct);\n\n    gl_FragColor = vec4(color,1.0);\n}\n`,\nlesson10:\n\t`\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n\tvec2 st = gl_FragCoord.xy/u_resolution;\n    float pct = 0.0;\n\n    vec2 tC = vec2(15.5)-st*31.0;\n    pct = sqrt(tC.x*tC.x+tC.y*tC.y-15.5);\n\n    vec3 color = vec3(pct);\n\n\tgl_FragColor = vec4( color, 1.0 );\n}\n`,\nlesson11:\n\t`\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nvoid main(){\n\tvec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n\tvec3 color = vec3(circle(st,0.3));\n\n\tgl_FragColor = vec4( color, 1.0 );\n}\n`,\nlesson12:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st.x *= u_resolution.x/u_resolution.y;\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n\n  // Make the distance field\n  // d = length( abs(st)-.3 );\n  // d = length( min(abs(st)-.3,0.) );\n  d = length( max(abs(st * abs(cos(u_time*0.5)))-.0,0.) );\n\n  // Visualize the distance field\n  gl_FragColor = vec4(vec3(fract(d*10.0)),1.0);\n\n  // Drawing with the distance field\n  // gl_FragColor = vec4(vec3( step(.3,d) ),1.0);\n  // gl_FragColor = vec4(vec3( step(.3,d) * step(d,.4)),1.0);\n  gl_FragColor = vec4(vec3( smoothstep(.1,.4,d)* smoothstep(.6,.55,d)) ,1.0);\n}\n`,\nlesson13:\n\t`\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Plot a line on Y using a value between 0.0-1.0\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct+0.9, pct, st.y) -\n          smoothstep( pct, pct-1.0, st.y);\n}\n\nvoid main(){\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    vec3 color = vec3(0.0);\n\n    vec2 pos = vec2(0.5)-st;\n\n    float r = length(pos)*2.0 ;\n    float a = atan(pos.y,pos.x) +PI*(u_time*0.25);\n\n    float f = cos(a*3.);\n    float q = abs(cos(a*12.)*sin(a*3.))*.8+.2;\n    // f = abs(cos(a*3.));\n    // f = abs(cos(a*2.5))*.5+.3;\n    // f = abs(cos(a*12.)*sin(a*3.))*.8+.1;\n    f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;\n\n    color = vec3( 1.-smoothstep(f,f+0.01,r) * 1.-smoothstep(f,0.4,r));\n    \n    float pct = plot(st,1.-smoothstep(f-0.0,f,r));\n    color = 1.0 * color+pct * vec3(abs(sin(u_time*0.5)),abs(cos(u_time*0.5)),abs(tan(u_time*0.5)));\n\n    gl_FragColor = vec4(color, 1.0);\n}\n`,\nlesson14:\n\t`\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\n\nvec3 makeShape(vec2 st, int N){\n  float d = 0.0;\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n  // Angle and radius from the current pixel\n  float a = atan(st.x,st.y)+PI;\n  float r = TWO_PI/float(N);\n\t\td = cos(floor(.5+a/r)*r-a)*length(st);\n  return vec3(1.0-smoothstep(.4,.41,d));\n}\n\nvoid main(){\n  vec2 st = gl_FragCoord.xy/u_resolution.xy;\n  st.x *= u_resolution.x/u_resolution.y;\n  vec3 \tcolor = vec3(0.0);\n\t\tcolor = makeShape(st, 3);\n\n  gl_FragColor = vec4(color,1.0);\n}\n`\n}\n\nconst lessons = Array.from(document.querySelectorAll('canvas[id^=\"lesson\"]'))\nconst lessonClasses = lessons.map( part => {\n\tconst lesson = new CanvasManager(`#${part.id}`)\n\tlesson.init()\n\treturn lesson\n})"]}